name: Scala CI - Publish Release

on:
  push:
    branches:
      - "feat-pubish-to-awscodeartifact"
  # release: 
  #   types: [released]
  
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        token: ${{ secrets.GH_TOKEN }}
        fetch-depth: 0
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Compile
      run: sbt ";compile ;test:compile"
    
    - name: Run tests (no Neo4j)
      run: sbt "testOnly * -- -l com.arkondata.slothql.test.tags.RequiresNeo4j"
    
    - uses: actions/checkout@v2
      with:
        repository: Grupo-Abraxas/arkon-cc-next-version
        ref: v0.1.5
        token: ${{ secrets.GH_TOKEN }}
        path: .github/actions/my-action
    - name: Get conventional commits next version
      uses: ./.github/actions/my-action
      id: cc
      with:
        project: "."
        directory: "."
        prefix: "v"
    - name: Initialize mandatory git config
      run: |
        git config --local user.name "jenkinsabraxas"
        git config --local user.email "services@grupoabraxas.com"
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Publish Artifact
      env:
        BASE_VERSION: "${{ steps.cc.outputs.calculated_next_version }}"
        g_actor: ${{ github.actor  }}
      run: |
        echo BASE_VERSION: $BASE_VERSION
        echo TAG_NAME: v$BASE_VERSION
        export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain arkondata --domain-owner 744752950324 --region us-east-1 --query authorizationToken --output text)
        CALCULATED_NEXT_VERSION=$BASE_VERSION sbt "release skip-tests with-defaults"

    # - name: Setup GPG for signing artifacts
    #   env:
    #     GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
    #   run: |
    #     mkdir -p ~/.gnupg/
    #     printf "$GPG_SECRET_KEY" | base64 --decode > ~/.gnupg/private.key
    #     gpg --batch --import ~/.gnupg/private.key
    #     chmod 700 -R ~/.gnupg/
    
    # - name: Upload public key 
    #   run: gpg2 --keyserver keys.openpgp.org --send-keys EB735176EE656DF6DDAFF7E715368E1526A42DC6
       
    # - name: Create local staging bundle (signed)
    #   env:
    #     PGP_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
    #   run: sbt publishSigned
    
    # - name: Bundle release to Sonatype
    #   env:
    #     SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
    #     SONATYPE_PWD: ${{ secrets.SONATYPE_PWD}}
    #   run: sbt sonatypeBundleRelease
