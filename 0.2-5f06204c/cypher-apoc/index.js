Index.PACKAGES = {"com.arkondata" : [], "com.arkondata.slothql" : [], "com.arkondata.slothql.cypher.syntax" : [{"name" : "com.arkondata.slothql.cypher.syntax.APOC", "shortDescription" : "", "object" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html", "members_object" : [{"label" : "assert", "tail" : "(pred: Expr[Boolean], msg: Expr[String], msgParams: Expr[Any]*)(res: Query[R]): Query[R]", "member" : "com.arkondata.slothql.cypher.syntax.APOC.assert", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html#assert[R](pred:com.arkondata.slothql.cypher.syntax.Expr[Boolean],msg:com.arkondata.slothql.cypher.syntax.Expr[String],msgParams:com.arkondata.slothql.cypher.syntax.Expr[Any]*)(res:com.arkondata.slothql.cypher.syntax.Query[R]):com.arkondata.slothql.cypher.syntax.Query[R]", "kind" : "def"}, {"label" : "assertNot", "tail" : "(pred: Expr[Boolean], msg: Expr[String], msgParams: Expr[Any]*)(res: Query[R]): Query[R]", "member" : "com.arkondata.slothql.cypher.syntax.APOC.assertNot", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html#assertNot[R](pred:com.arkondata.slothql.cypher.syntax.Expr[Boolean],msg:com.arkondata.slothql.cypher.syntax.Expr[String],msgParams:com.arkondata.slothql.cypher.syntax.Expr[Any]*)(res:com.arkondata.slothql.cypher.syntax.Query[R]):com.arkondata.slothql.cypher.syntax.Query[R]", "kind" : "def"}, {"label" : "case", "tail" : "", "member" : "com.arkondata.slothql.cypher.syntax.APOC.case", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html#case", "kind" : "object"}, {"label" : "when", "tail" : "(cond: Expr[Boolean], thenQuery: ParameterizedCypherQuery[PT, A], elseQuery: ParameterizedCypherQuery[PE, A])(b: Builder[PT, PE]): ParamsSyntax[Params, A]", "member" : "com.arkondata.slothql.cypher.syntax.APOC.when", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html#when[PT<:shapeless.HList,PE<:shapeless.HList,Ps<:shapeless.HList,A](cond:com.arkondata.slothql.cypher.syntax.Expr[Boolean],thenQuery:com.arkondata.slothql.cypher.ParameterizedCypherQuery[PT,A],elseQuery:com.arkondata.slothql.cypher.ParameterizedCypherQuery[PE,A])(implicitb:com.arkondata.slothql.cypher.syntax.apoc.When.Builder[PT,PE]):com.arkondata.slothql.cypher.syntax.apoc.When.ParamsSyntax[b.Params,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/APOC$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "com.arkondata.slothql.cypher" : [], "com.arkondata.slothql.cypher.syntax.apoc" : [{"name" : "com.arkondata.slothql.cypher.syntax.apoc.Case", "shortDescription" : "", "object" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html", "members_object" : [{"label" : "QuerySyntax", "tail" : "", "member" : "com.arkondata.slothql.cypher.syntax.apoc.Case.QuerySyntax", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#QuerySyntax[A]extendsAnyRef", "kind" : "class"}, {"label" : "ParamsSyntax", "tail" : "", "member" : "com.arkondata.slothql.cypher.syntax.apoc.Case.ParamsSyntax", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#ParamsSyntax[ParamExprs<:shapeless.HList,A]extendsRecordArgs", "kind" : "class"}, {"label" : "OtherwiseSyntax", "tail" : "", "member" : "com.arkondata.slothql.cypher.syntax.apoc.Case.OtherwiseSyntax", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#OtherwiseSyntax[CasesParams<:shapeless.HList,A]extendsAnyRef", "kind" : "class"}, {"label" : "WrapCypherExprPoly", "tail" : "", "member" : "com.arkondata.slothql.cypher.syntax.apoc.Case.WrapCypherExprPoly", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#WrapCypherExprPoly", "kind" : "object"}, {"label" : "Builder", "tail" : "", "member" : "com.arkondata.slothql.cypher.syntax.apoc.Case.Builder", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#Builder", "kind" : "object"}, {"label" : "Builder", "tail" : "", "member" : "com.arkondata.slothql.cypher.syntax.apoc.Case.Builder", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#Builder[Cases<:shapeless.HList]extendsAnyRef", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "return", "tail" : "(): Return[Out]", "member" : "com.arkondata.slothql.cypher.syntax.toCypherSyntaxReturnOps.return", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#return:com.arkondata.slothql.cypher.CypherFragment.Return[R]", "kind" : "def"}, {"label" : "limit", "tail" : "(inp: Input[N])(arg0: <:<[((N) => Nothing) => Nothing, ((Int) => Nothing with (Long) => Nothing) => Nothing], notYet: NotYet[HNil, Limit]): CypherSyntaxReturnOps[Case[Params, A], ::[Limit, HNil], Out]", "member" : "com.arkondata.slothql.cypher.syntax.toCypherSyntaxReturnOps.limit", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#limit[N](inp:com.arkondata.slothql.cypher.CypherFragment.Expr.Input[N])(implicitevidence$2:(N=>Nothing)=>Nothing<:<Int=>NothingwithLong=>Nothing=>Nothing,implicitnotYet:com.arkondata.slothql.cypher.syntax.package.CypherSyntaxReturnOps.NotYet[Done,com.arkondata.slothql.cypher.syntax.package.CypherSyntaxReturnOps.Opt.Limit]):com.arkondata.slothql.cypher.syntax.package.CypherSyntaxReturnOps[T,com.arkondata.slothql.cypher.syntax.package.CypherSyntaxReturnOps.Opt.Limit::Done,R]", "kind" : "def"}, {"label" : "skip", "tail" : "(inp: Input[N])(arg0: <:<[((N) => Nothing) => Nothing, ((Int) => Nothing with (Long) => Nothing) => Nothing], notYet: NotYet[HNil, Skip]): CypherSyntaxReturnOps[Case[Params, A], ::[Skip, HNil], Out]", "member" : "com.arkondata.slothql.cypher.syntax.toCypherSyntaxReturnOps.skip", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#skip[N](inp:com.arkondata.slothql.cypher.CypherFragment.Expr.Input[N])(implicitevidence$1:(N=>Nothing)=>Nothing<:<Int=>NothingwithLong=>Nothing=>Nothing,implicitnotYet:com.arkondata.slothql.cypher.syntax.package.CypherSyntaxReturnOps.NotYet[Done,com.arkondata.slothql.cypher.syntax.package.CypherSyntaxReturnOps.Opt.Skip]):com.arkondata.slothql.cypher.syntax.package.CypherSyntaxReturnOps[T,com.arkondata.slothql.cypher.syntax.package.CypherSyntaxReturnOps.Opt.Skip::Done,R]", "kind" : "def"}, {"label" : "orderBy", "tail" : "(expr: CypherFragment.Expr[_], ord: (Order.type) => Order): CypherSyntaxReturnOps[Case[Params, A], HNil, Out]", "member" : "com.arkondata.slothql.cypher.syntax.toCypherSyntaxReturnOps.orderBy", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#orderBy(expr:com.arkondata.slothql.cypher.CypherFragment.Expr[_],ord:com.arkondata.slothql.cypher.CypherFragment.Return.Order.type=>com.arkondata.slothql.cypher.CypherFragment.Return.Order):com.arkondata.slothql.cypher.syntax.package.CypherSyntaxReturnOps[T,Done,R]", "kind" : "def"}, {"label" : "orderBy", "tail" : "(expr: CypherFragment.Expr[_], ord: Order): CypherSyntaxReturnOps[Case[Params, A], HNil, Out]", "member" : "com.arkondata.slothql.cypher.syntax.toCypherSyntaxReturnOps.orderBy", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#orderBy(expr:com.arkondata.slothql.cypher.CypherFragment.Expr[_],ord:com.arkondata.slothql.cypher.CypherFragment.Return.Order):com.arkondata.slothql.cypher.syntax.package.CypherSyntaxReturnOps[T,Done,R]", "kind" : "def"}, {"label" : "distinct", "tail" : "(notYet: NotYet[HNil, Distinct]): CypherSyntaxReturnOps[Case[Params, A], ::[Distinct, HNil], Out]", "member" : "com.arkondata.slothql.cypher.syntax.toCypherSyntaxReturnOps.distinct", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#distinct(implicitnotYet:com.arkondata.slothql.cypher.syntax.package.CypherSyntaxReturnOps.NotYet[Done,com.arkondata.slothql.cypher.syntax.package.CypherSyntaxReturnOps.Opt.Distinct]):com.arkondata.slothql.cypher.syntax.package.CypherSyntaxReturnOps[T,com.arkondata.slothql.cypher.syntax.package.CypherSyntaxReturnOps.Opt.Distinct::Done,R]", "kind" : "def"}, {"label" : "ret", "tail" : ": Return[Out]", "member" : "com.arkondata.slothql.cypher.syntax.cypherSyntaxTupleToQueryReturn.ret", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#ret:com.arkondata.slothql.cypher.CypherFragment.Return[A]", "kind" : "val"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Case[Params, A]) => Boolean, msg: => Any): Case[Params, A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Case[Params, A]) => Boolean): Case[Params, A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Case[Params, A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Case[Params, A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Case[Params, A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Case[Params, A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "com.arkondata.slothql.cypher.syntax.apoc.Case#<init>", "error" : "unsupported entity"}, {"label" : "query", "tail" : ": ParameterizedCypherQuery[Params, A]", "member" : "com.arkondata.slothql.cypher.syntax.apoc.Case.query", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#query:com.arkondata.slothql.cypher.ParameterizedCypherQuery[Params,A]", "kind" : "val"}, {"label" : "condition", "tail" : ": Expr[Boolean]", "member" : "com.arkondata.slothql.cypher.syntax.apoc.Case.condition", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#condition:com.arkondata.slothql.cypher.syntax.Expr[Boolean]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/Case.html", "kind" : "case class"}, {"name" : "com.arkondata.slothql.cypher.syntax.apoc.When", "shortDescription" : "", "object" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html", "members_object" : [{"label" : "QuerySyntax", "tail" : "", "member" : "com.arkondata.slothql.cypher.syntax.apoc.When.QuerySyntax", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html#QuerySyntax[A]extendsAnyRef", "kind" : "class"}, {"label" : "ParamsSyntax", "tail" : "", "member" : "com.arkondata.slothql.cypher.syntax.apoc.When.ParamsSyntax", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html#ParamsSyntax[ParamExprs<:shapeless.HList,A]extendsRecordArgs", "kind" : "class"}, {"label" : "Builder", "tail" : "", "member" : "com.arkondata.slothql.cypher.syntax.apoc.When.Builder", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html#Builder", "kind" : "object"}, {"label" : "Builder", "tail" : "", "member" : "com.arkondata.slothql.cypher.syntax.apoc.When.Builder", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html#Builder[ParamsThen<:shapeless.HList,ParamsElse<:shapeless.HList]extendsAnyRef", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/arkondata\/slothql\/cypher\/syntax\/apoc\/When$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "com" : []};